{% import "helpers.j2" as helpers %}

{%- macro canard_data_type(type, offset) -%}
  {%- set len = type.bit_length -%}
  {%- if type is BooleanType -%}
Bit(buf, buf_len, offset + {{offset}})
  {%- elif type is SignedIntegerType -%}
    {%- if len <= 8 -%}
I8(buf, buf_len, offset + {{offset}}, {{len}})
    {%- elif len <= 16 -%}
I16(buf, buf_len, offset + {{offset}}, {{len}})
    {%- elif len <= 32 -%}
I32(buf, buf_len, offset + {{offset}}, {{len}})
    {%- elif len <= 64 -%}
I64(buf, buf_len, offset + {{offset}}, {{len}})
    {%- endif -%}
  {%- elif type is UnsignedIntegerType -%}
    {%- if len <= 8 -%}
U8(buf, buf_len, offset + {{offset}}, {{len}})
    {%- elif len <= 16 -%}
U16(buf, buf_len, offset + {{offset}}, {{len}})
    {%- elif len <= 32 -%}
U32(buf, buf_len, offset + {{offset}}, {{len}})
    {%- elif len <= 64 -%}
U64(buf, buf_len, offset + {{offset}}, {{len}})
    {%- endif %}
  {%- elif type is FloatType %}
    {%- if len == 16 -%}
F16(buf, buf_len, offset + {{ offset }})
    {%- elif len == 32 -%}
F32(buf, buf_len, offset + {{ offset }})
    {%- elif len == 64 -%}
F64(buf, buf_len, offset + {{ offset }})
    {%- endif -%}
  {%- endif %}
{%- endmacro -%}

{%- macro get_field(field, offset) -%}
  {%- set len = attr.data_type.bit_length %}
  {%- if attr.data_type is PrimitiveType %}
  data->{{attr.name}} = canardDSDLGet{{ canard_data_type(attr.data_type, offset) }};
  {%- else -%}
  {{ attr.data_type.full_name.replace('.','_') }}_decode(buf, buf_len, offset + {{offset}}, &data->{{attr.name}});
  {%- endif -%}
{%- endmacro -%}
