{% import "helpers.j2" as helpers %}

{%- macro set_field(field, offset) -%}
  {%- if field.data_type is PrimitiveType -%}
    {%- if field.data_type is BooleanType -%}
  canardDSDLSetBit(buf, offset + {{ offset }}, data->{{field.name}})
    {%- elif field.data_type is SignedIntegerType -%}
  canardDSDLSetIxx(buf, offset + {{ offset }}, data->{{field.name}}, {{field.data_type.bit_length}})
    {%- elif field.data_type is UnsignedIntegerType -%}
  canardDSDLSetUxx(buf, offset + {{ offset }}, data->{{field.name}}, {{field.data_type.bit_length}})
    {%- elif field.data_type is FloatType -%}
      {%- set len = field.data_type.bit_length -%}
      {%- if len == 16 -%}
  canardDSDLSetF16(buf, offset + {{ offset }}, data->{{field.name}})
      {%- elif len == 32 -%}
  canardDSDLSetF32(buf, offset + {{ offset }}, data->{{field.name}})
      {%- elif len == 64 -%}
  canardDSDLSetF64(buf, offset + {{ offset }}, data->{{field.name}})
      {%- endif -%}
    {%- endif -%}
  {%- else -%}{# StructureType or UnionType -#}
  {{ helpers.name_convert(field.data_type.full_name, '_') }}_encode(buf, offset + {{ offset }}, data->{{field.name}})
  {%- endif -%}
{%- endmacro -%}

{%- macro set_size(field, offset) -%}
  {%- if field.data_type is PrimitiveType -%}
  {{ set_field(field, offset) }};
  size += {{ field.data_type.bit_length }};
  {%- else -%}
  size += {{ set_field(field, offset) }};
  {%- endif %}
{%- endmacro -%}
