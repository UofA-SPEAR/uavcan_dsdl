// UAVCAN data structure definition.                                                                          +-+ +-+
//                                                                                                            | | | |
// AUTOGENERATED, DO NOT EDIT.                                                                                \  -  /
//                                                                                                              ---
//                                                                                                               o
// +------------------------------------------------------------------------------------------------------------------+
//
// Generator:
// nunavut-0.3.4 (serialization was enabled)
//
//
// Source File:
// /home/david/Documents/Clubs/SPEAR/uavcan_dsdl/public_regulated_data_types/uavcan/metatransport/can/Frame.0.1.uavcan
//
// Template:
// StructureType.j2
//
// Generated at:  2020-08-21 01:54:41.931594 UTC
// Is deprecated: no
// Fixed port ID: None
// Full name:     uavcan.metatransport.can.Frame
// Version:       0.1

#ifndef UAVCAN_METATRANSPORT_CAN_FRAME_INCLUDED
#define UAVCAN_METATRANSPORT_CAN_FRAME_INCLUDED

#include <nunavut/support/nunavut.h>
#include <uavcan/metatransport/can/Manifestation_0_1.h>
#include <uavcan/time/SynchronizedTimestamp_1_0.h>
#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


typedef struct
{
    uavcan_time_SynchronizedTimestamp_1_0 timestamp;
    uavcan_metatransport_can_Manifestation_0_1 manifestation;
} uavcan_metatransport_can_Frame_0_1;

/// Initialize an uavcan_metatransport_can_Frame_0_1 instance to default values.
/// No memory is allocated within this method.
/// Does nothing if @ref out_instance is NULL.
///
/// @param out_instance A structure instance to Initialize.
static inline void uavcan_metatransport_can_Frame_0_1_init(uavcan_metatransport_can_Frame_0_1* const out_instance)
{
    if (out_instance != NULL)
    {
        uavcan_time_SynchronizedTimestamp_1_0_init(&(out_instance->timestamp));
        uavcan_metatransport_can_Manifestation_0_1_init(&(out_instance->manifestation));
    }
}

/// Contains the maximum number of bytes needed to serialize a(n) uavcan_metatransport_can_Frame_0_1
/// instance.
#define uavcan_metatransport_can_Frame_0_1_MAX_SERIALIZED_REPRESENTATION_SIZE_BYTES \
        (78U)


/// Serialization of uavcan_metatransport_can_Frame_0_1 instance into a byte array.
///
/// @param in_instance   A structure instance to serialize.
/// @param offset        Offset (in bits) of data type in message.
/// @param out_buffer    Output message buffer.
///
/// @returns             Size of encoded data (in bits)
static inline NunavutSignedBitLength uavcan_metatransport_can_Frame_0_1_serialize(const uavcan_metatransport_can_Frame_0_1* in_instance, NunavutUnsignedBitLength offset, uint8_t* const out_buffer)
{
    NunavutSignedBitLength rc = 0;

    if (out_buffer == NULL)
    {
        return -NUNAVUT_ERR_INVALID_BUF;
    }
    
    // Begin Structure: uavcan.time.SynchronizedTimestamp.1.0
    rc = uavcan_time_SynchronizedTimestamp_1_0_serialize(&(in_instance->timestamp), offset, out_buffer);
        if (rc < 0)
        {
            return rc;
        }
        offset = rc;
    // End Structure: uavcan.time.SynchronizedTimestamp.1.0
    // Begin Structure: uavcan.metatransport.can.Manifestation.0.1
    rc = uavcan_metatransport_can_Manifestation_0_1_serialize(&(in_instance->manifestation), offset, out_buffer);
        if (rc < 0)
        {
            return rc;
        }
        offset = rc;
    // End Structure: uavcan.metatransport.can.Manifestation.0.1

    return offset;
}

/// Deserialization of byte-array encoding into uavcan_metatransport_can_Frame_0_1 instance.
///
/// @param out_instance      Structure instance to write data to.
/// @param offset            Bit offset of structure in data buffer.
/// @param in_buffer         Message buffer to deserialize.
/// @param buf_size_bytes    Length of input buffer (in bytes) to avoid overflow.
///
/// @returns                 Size of decoded data (in bits)
static inline NunavutSignedBitLength uavcan_metatransport_can_Frame_0_1_deserialize(uavcan_metatransport_can_Frame_0_1* const out_instance, NunavutUnsignedBitLength offset, uint8_t* const in_buffer, const size_t buf_size_bytes)
{
    NunavutSignedBitLength rc = 0;

    if (in_buffer == NULL)
    {
        return -NUNAVUT_ERR_INVALID_BUF;
    }
    
    // Begin Structure: uavcan.time.SynchronizedTimestamp.1.0
    rc = uavcan_time_SynchronizedTimestamp_1_0_deserialize(&(out_instance->timestamp), offset, in_buffer, buf_size_bytes);
    if (rc < 0)
    {
        return rc;
    }
    offset = rc;
    // End Structure: uavcan.time.SynchronizedTimestamp.1.0
    // Begin Structure: uavcan.metatransport.can.Manifestation.0.1
    rc = uavcan_metatransport_can_Manifestation_0_1_deserialize(&(out_instance->manifestation), offset, in_buffer, buf_size_bytes);
    if (rc < 0)
    {
        return rc;
    }
    offset = rc;
    // End Structure: uavcan.metatransport.can.Manifestation.0.1

    return offset;
}


#ifdef __cplusplus
} /* End extern "C" */
#endif /* __cplusplus */
#endif /* UAVCAN_METATRANSPORT_CAN_FRAME */
