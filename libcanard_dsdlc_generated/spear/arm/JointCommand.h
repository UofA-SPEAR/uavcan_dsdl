/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/isthatme/Documents/Clubs/SPEAR/dsdl/spear/arm/20100.JointCommand.uavcan
 */

#ifndef __SPEAR_ARM_JOINTCOMMAND
#define __SPEAR_ARM_JOINTCOMMAND

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
# Command for moving arm joint

# ID of joint
uint4 joint

# Position to send to (in tenths of a degree)
uint12 angle
******************************************************************************/

/********************* DSDL signature source definition ***********************
spear.arm.JointCommand
saturated uint4 joint
saturated uint12 angle
******************************************************************************/

#define SPEAR_ARM_JOINTCOMMAND_ID                          20100
#define SPEAR_ARM_JOINTCOMMAND_NAME                        "spear.arm.JointCommand"
#define SPEAR_ARM_JOINTCOMMAND_SIGNATURE                   (0x349A2A59E4615FE0ULL)

#define SPEAR_ARM_JOINTCOMMAND_MAX_SIZE                    ((16 + 7)/8)

// Constants

typedef struct
{
    // FieldTypes
    uint8_t    joint;                         // bit len 4
    uint16_t   angle;                         // bit len 12

} spear_arm_JointCommand;

extern
uint32_t spear_arm_JointCommand_encode(spear_arm_JointCommand* source, void* msg_buf);

extern
int32_t spear_arm_JointCommand_decode(const CanardRxTransfer* transfer, uint16_t payload_len, spear_arm_JointCommand* dest, uint8_t** dyn_arr_buf);

extern
uint32_t spear_arm_JointCommand_encode_internal(spear_arm_JointCommand* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t spear_arm_JointCommand_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, spear_arm_JointCommand* dest, uint8_t** dyn_arr_buf, int32_t offset, uint8_t tao);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __SPEAR_ARM_JOINTCOMMAND