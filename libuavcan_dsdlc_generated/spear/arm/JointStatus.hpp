/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/isthatme/Documents/Clubs/SPEAR/dsdl/spear/arm/20101.JointStatus.uavcan
 */

#ifndef SPEAR_ARM_JOINTSTATUS_HPP_INCLUDED
#define SPEAR_ARM_JOINTSTATUS_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Status message for location of arm joint
#

# ID of joint
uint4 joint

# Angle joint is *currently* at (unsigned tenths of a degree)
uint12 angle
******************************************************************************/

/********************* DSDL signature source definition ***********************
spear.arm.JointStatus
saturated uint4 joint
saturated uint12 angle
******************************************************************************/

#undef joint
#undef angle

namespace spear
{
namespace arm
{

template <int _tmpl>
struct UAVCAN_EXPORT JointStatus_
{
    typedef const JointStatus_<_tmpl>& ParameterType;
    typedef JointStatus_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 4, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > joint;
        typedef ::uavcan::IntegerSpec< 12, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > angle;
    };

    enum
    {
        MinBitLen
            = FieldTypes::joint::MinBitLen
            + FieldTypes::angle::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::joint::MaxBitLen
            + FieldTypes::angle::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::joint >::Type joint;
    typename ::uavcan::StorageType< typename FieldTypes::angle >::Type angle;

    JointStatus_()
        : joint()
        , angle()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<16 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 20101 };

    static const char* getDataTypeFullName()
    {
        return "spear.arm.JointStatus";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool JointStatus_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        joint == rhs.joint &&
        angle == rhs.angle;
}

template <int _tmpl>
bool JointStatus_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(joint, rhs.joint) &&
        ::uavcan::areClose(angle, rhs.angle);
}

template <int _tmpl>
int JointStatus_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::joint::encode(self.joint, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::angle::encode(self.angle, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int JointStatus_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::joint::decode(self.joint, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::angle::decode(self.angle, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature JointStatus_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x19899CB312099F3CULL);

    FieldTypes::joint::extendDataTypeSignature(signature);
    FieldTypes::angle::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef JointStatus_<0> JointStatus;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::spear::arm::JointStatus > _uavcan_gdtr_registrator_JointStatus;

}

} // Namespace arm
} // Namespace spear

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::spear::arm::JointStatus >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::spear::arm::JointStatus::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::spear::arm::JointStatus >::stream(Stream& s, ::spear::arm::JointStatus::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "joint: ";
    YamlStreamer< ::spear::arm::JointStatus::FieldTypes::joint >::stream(s, obj.joint, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "angle: ";
    YamlStreamer< ::spear::arm::JointStatus::FieldTypes::angle >::stream(s, obj.angle, level + 1);
}

}

namespace spear
{
namespace arm
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::spear::arm::JointStatus::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::spear::arm::JointStatus >::stream(s, obj, 0);
    return s;
}

} // Namespace arm
} // Namespace spear

#endif // SPEAR_ARM_JOINTSTATUS_HPP_INCLUDED